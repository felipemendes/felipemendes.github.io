{"componentChunkName":"component---src-templates-blog-post-js","path":"/optionals/","result":{"data":{"site":{"siteMetadata":{"title":"Felipe Mendes"}},"markdownRemark":{"id":"82bce42a-4c04-5aea-b686-7b72b2122e46","excerpt":"Em Swift, Optional (ou para muitos, apenas os sinais  e ) é uma solução segura para acessar valores não existentes. Conforme a documentação da Apple, Optional é…","html":"<p>Em Swift, <em>Optional</em> (ou para muitos, apenas os sinais <code class=\"language-text\">?</code> e <code class=\"language-text\">!</code>) é uma solução segura para acessar valores não existentes. Conforme a documentação da Apple, <em>Optional</em> é um tipo que representa um valor empacotado (<em>wrapped</em>) ou nulo (<em>nil</em>, ausência de um valor).</p>\n<p><em>Optional</em> é basicamente um <em>enum</em> e essencialmente se parece com isso</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Optional</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">none</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">some</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Onde <em>T</em> é um tipo genérico como Array ou Dicionário. Mas o tipo <em>Optional</em> é tão importante que possui muitas sintaxes especiais que outros tipos não possuem. Algumas são:</p>\n<ul>\n<li>O <em>case</em> sem valor recebe a palavra reservada <strong>nil</strong></li>\n<li>O sinal <code class=\"language-text\">?</code> é utilizado para declarar um <em>Optional</em></li>\n<li>O sinal <code class=\"language-text\">!</code> serve para desembrulhar (<em>unwrap</em>) o valor associado</li>\n</ul>\n<h3>Forced Unwrapping</h3>\n<p>Neste desempacotamento (<em>unwrap</em>) o sinal <code class=\"language-text\">!</code> é utilizado diretamente para recuperar o valor associado. Não há nenhum tipo de validação para assegurar que o valor realmente existe. Basicamente, estamos dizendo que temos certeza que há algo para ser extraído. Esse é o método não seguro e não recomendado, uma vez que a variável pode estar vazia e um erro fatal será exibido e o aplicativo será fechado. Este é um erro admissível.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> driverLicense<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token comment\">// declara a variável</span>\ndriverLicense<span class=\"token operator\">!</span> <span class=\"token comment\">// retorna erro</span>\n\ndriverLicense <span class=\"token operator\">=</span> <span class=\"token number\">1234</span> <span class=\"token comment\">// associa valor</span>\ndriverLicense<span class=\"token operator\">!</span> <span class=\"token comment\">// retorna 1234</span></code></pre></div>\n<h3>Optional Binding</h3>\n<p>Diferente do <code class=\"language-text\">Forced Unwrapping</code> o <code class=\"language-text\">Optional Binding</code> é a forma mais eficaz e segura para extrair o valor de uma variável ou constante. Permite verificar se o <em>optional</em> contém valor antes de utilizá-lo. Quando há valor este pode ser utilizado temporariamente dentro da declaração.</p>\n<p>A verificação pode ser feita utilizando qualquer declaração condicional. O <code class=\"language-text\">Optional Binding</code> é mais recomendado que os demais métodos.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> hello<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello\"</span></span>\n\n<span class=\"token keyword\">switch</span> hello <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">none</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// retorna erro</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Utilizando declaração <strong>if</strong></h5>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> hello <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// retorna erro</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Caso necessário alterar o valor consultado dentro da declaração pode-se utilizar o <strong>if var</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> hello <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token comment\">// retorna *\"Hello\"*</span>\n    greeting <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Olá\"</span></span> <span class=\"token comment\">// altera valor da variável</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token comment\">// retorna *\"Olá\"*</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// retorna erro</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tanto com <em>if let</em> quanto <em>if var</em> o valor somente existe dentro do escopo da declaração. Portanto sua mudança não tem efeito fora do bloco de validação. A alternativa para armazenar o valor extraído e ainda utilizá-lo fora do escopo é substituir a sintaxe <em>if</em> para <em>guard</em>.</p>\n<h5>Utilizando declaração <strong>guard</strong></h5>\n<p>A declaração <code class=\"language-text\">guard</code> é simples e muito poderosa. Ela realiza verificação da condição e, se o valor for <em>nil</em>, a instrução <code class=\"language-text\">else</code> será executada e sairá do método. Se houver valor a informação desembrulhada é armazenada e pode ser acessar diretamente sem a necessidade de um novo <em>unwrap</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> hello <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Da mesma forma do <em>if var</em> podemos substituir por <em>guard var</em> quando é necessário alterar valor <em>unwrapped</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">guard</span> <span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> hello <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token comment\">// retorna *\"Hello\"*</span>\ngreeting <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Olá\"</span></span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token comment\">// retorna *\"Olá\"*</span></code></pre></div>\n<h3>Implicitly Unwrapped Optionals</h3>\n<p><code class=\"language-text\">Implicitly Unwrapped Optional</code> é outra forma de desembrulhar valores. Apenas use o sinal <code class=\"language-text\">!</code> após o tipo da declaração. Este método é utilizado quando temos certeza que o <code class=\"language-text\">optional</code> possui valor, neste caso não teria necessidade de desembrulhá-lo sempre que for acessá-lo.</p>\n<p>Ao acessar a variável/constante utilizando a forma implícita, mesmo que não tenha nenhum valor atribuído, o retorno será bem-sucedido. Mas cuidado, se tentarmos manipular essa informação invocando algum método, por exemplo, o retorno será um erro fatal.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> greeting<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">!</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token comment\">// retorna *nil*</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// FATAL ERROR. Terminated by signal 4</span></code></pre></div>\n<h3>Nil Coalescing</h3>\n<p>Maneira de definir um valor padrão quando o <em>Optional</em> for <em>nil</em>. Há algumas formas de fazer esta ação como <strong>declaração condicional</strong> e <strong>operador ternário</strong>. Mas o <em>Nil Coalescing</em> nos permite encurtar isso ainda mais com os sinais <code class=\"language-text\">??</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span>\nx <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Testing\"</span></span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">??</span> <span class=\"token string-literal\"><span class=\"token string\">\"foo\"</span></span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Dessa forma o método <em>print</em> retornará <em>“Testing”</em>. Se a variável <em>x</em> não houvesse valor associado o <em>print</em> retornaria <em>“foo”</em>.</p>\n<h3>Optional Chaining</h3>\n<p><code class=\"language-text\">Optional Chaining</code> é o recurso que permite chamar propriedades e métodos em um <em>Optional</em> que pode ser nulo. Ao contrário do <code class=\"language-text\">Implicitly Unwrapped</code>, o <code class=\"language-text\">Optional Chaining</code> não retorna um erro fatal quando o valor é nulo.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> residence<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Residence</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Residence</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> numberOfRooms <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> roomCount <span class=\"token operator\">=</span> john<span class=\"token punctuation\">.</span>residence<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>numberOfRooms <span class=\"token comment\">// FATAL ERROR. Terminated by signal 4</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> roomCount <span class=\"token operator\">=</span> john<span class=\"token punctuation\">.</span>residence<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>numberOfRooms <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"John's residence has </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">roomCount</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> room(s).\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Unable to retrieve the number of rooms.\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// retorna aqui</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Visualmente esta é a melhor forma de <em>unwrap</em> e também recomendada.</p>","frontmatter":{"title":"Optionals","date":"07 fevereiro, 2019","description":""}},"previous":{"fields":{"slug":"/localizacao-i18n/"},"frontmatter":{"title":"Localização (i18n)"}},"next":{"fields":{"slug":"/struct-vs-class/"},"frontmatter":{"title":"Struct vs Class"}}},"pageContext":{"id":"82bce42a-4c04-5aea-b686-7b72b2122e46","previousPostId":"08de8f99-0ab2-55ce-87cb-db2576139d44","nextPostId":"85f3ec9d-ef3c-5b6e-8dc8-fae689a10c2d"}},"staticQueryHashes":["1344965497","2841359383"]}