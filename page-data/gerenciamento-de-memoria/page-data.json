{"componentChunkName":"component---src-templates-blog-post-js","path":"/gerenciamento-de-memoria/","result":{"data":{"site":{"siteMetadata":{"title":"Felipe Mendes"}},"markdownRemark":{"id":"5e82731a-9ddd-532e-a3a2-9d9cf7350b2a","excerpt":"Este é um assunto muito importante para desenvolvedores que têm, ou pretendem ter, preocupação em manter os ciclos no código. No dia a dia acabamos utilizando…","html":"<p>Este é um assunto muito importante para desenvolvedores que têm, ou pretendem ter, preocupação em manter os ciclos no código. No dia a dia acabamos utilizando os recursos para evitar <em>retain cycles</em>, mas muitas das vezes não sabemos seu funcionamento correto. Este <em>post</em> visa esclarecer como não se perder no uso da memória.</p>\n<h2>ARC</h2>\n<p>O gerenciamento de memória utilizado pelo Swift é o chamado <a href=\"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html\">ARC</a> (Automatic Reference Counting ou Contagem Automática de Referência) que foi herdado do ObjC. </p>\n<p>Ele é responsável por liberar memória apenas para objetos quando não há nenhuma referência <code class=\"language-text\">strong</code> à eles.</p>\n<p>O ARC automaticamente armazena referências na memória e as removem quando não estão sendo utilizadas. Para saber quais objetos ainda estão em uso, ele rastreia a relação entre objetos aumentando e diminuindo a contagem de referência. A contagem de referência aplica-se apenas às instâncias de <code class=\"language-text\">Classes</code> por serem <code class=\"language-text\">Reference Types</code>.</p>\n<p><code class=\"language-text\">Structs</code> e <code class=\"language-text\">Enums</code> são <code class=\"language-text\">Value Types</code> portanto não são armazenados ou passados por referência. Este é outro motivo para preferir o uso de <code class=\"language-text\">Struct</code>.</p>\n<p>Contudo, o ARC não previne que ocorra <em>memory leak</em> no código. O mal uso dos tipos de referências do ARC pode causar erro de memória no app. A utilização dos tipos <code class=\"language-text\">weak</code> e <code class=\"language-text\">unowned</code> podem ajudar no funcionamento da memória.</p>\n<h3>Reference Counting</h3>\n<p>Em Ciência da Computação, <code class=\"language-text\">Contagem de Referência</code> é uma técnica para armazenar o número de referências, ponteiros ou identificadores em recursos como objetos, blocos ou memória.</p>\n<h3>Funcionamento do ARC</h3>\n<p>Cada vez que uma instância de classe é criado através do método <code class=\"language-text\">init()</code>, o ARC aloca memória suficiente e armazena os valores das propriedades. Quando a instância não for mais necessária, o método <code class=\"language-text\">deinit()</code> é chamado e o ARC libera o espaço da memória antes alocado.</p>\n<h2>Strong, Weak e Unowned</h2>\n<p>O gerenciamento de memória em Swift faz o uso de três tipos de referências: <code class=\"language-text\">strong</code>, <code class=\"language-text\">weak</code> e <code class=\"language-text\">unowned</code>.</p>\n<h3>Strong</h3>\n<p> É basicamente uma referência que tem como propósito proteger um objeto de ser desalocado pelo <em>ARC</em>. Para isso o <em>retain count</em> é incrementado por 1 em cada instância.</p>\n<p> <strong>Enquanto</strong> o objeto houver uma referência <em>strong</em> à ele, este não será removido da memória. Essencialmente esse tipo protege o objeto de ser desalocado da memória enquanto a referência existir.</p>\n<p> O uso de <em>strong</em> é tão comum que é a declaração padrão de toda proprieda. Ou seja, quando declarado uma propriedade e não especificado seu tipo esta será <em>strong</em>.</p>\n<p> É seguro utilizar <em>strong</em> quando a hierarquia do relacionamento dos objetos é <u>linear</u>. Isso quer dizer que, quando a referência é utilizada do Pai para o Filho sempre é correto manter como <em>strong</em>.</p>\n<p>No exemplo a seguir o objeto <code class=\"language-text\">Device</code> é instanciado e o método <code class=\"language-text\">init()</code> é invocado. Quando o objeto não mais for utilizado o método <code class=\"language-text\">deinit()</code> será chamado (ou seja, o <code class=\"language-text\">retain count</code> será diminuido):</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Device</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Device named </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> allocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Device named </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> deallocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> iphone <span class=\"token operator\">=</span> <span class=\"token class-name\">Device</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"iPhone\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A inicialização do objeto <code class=\"language-text\">Device</code> é envolvida em um bloco <code class=\"language-text\">do</code> para que seja criado um escopo em torno dele.</p>\n<p>Retorno no console será:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">Device</span> named iPhone allocated\n<span class=\"token class-name\">Device</span> named iPhone deallocated</code></pre></div>\n<p>Agora no próximo exemplo é utilizado referência entre classes:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Device</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> owner<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Owner</span><span class=\"token operator\">?</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Device named </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> allocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Device named </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> deallocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Owner</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> device<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Device</span><span class=\"token operator\">?</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Owner </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> allocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Owner </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> deallocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Instanciando os objetos:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> iphone <span class=\"token operator\">=</span> <span class=\"token class-name\">Device</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"iPhone\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> felipe <span class=\"token operator\">=</span> <span class=\"token class-name\">Owner</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Felipe\"</span></span><span class=\"token punctuation\">)</span>\niphone<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> felipe\nfelipe<span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> iphone</code></pre></div>\n<p>Retorno no console:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">Device</span> named iPhone allocated\n<span class=\"token class-name\">Owner</span> <span class=\"token class-name\">Felipe</span> allocated</code></pre></div>\n<p>Como podemos ver os métodos <code class=\"language-text\">deinit()</code> não são invocados. Portanto <code class=\"language-text\">strong</code> impede que a contagem de retenções atinja zero para ser desalocado e liberado da memória.</p>\n<p>Para resolver esse problema, precisamos de referências <code class=\"language-text\">weak</code>.</p>\n<h3>Weak</h3>\n<p>Diferentemente das referências <code class=\"language-text\">strong</code>, o tipo <code class=\"language-text\">weak</code> <strong>não</strong> protege o objeto de ser desalocado pelo ARC. Ao ser desalocado, a referência <code class=\"language-text\">weak</code> será automaticamente definida para <code class=\"language-text\">nil</code>. Portanto, a instância é removida da memória se nenhum outro objeto tiver uma referência <code class=\"language-text\">strong</code> à instância.</p>\n<p>Em Swift, todas as referências <code class=\"language-text\">weak</code> são opcionais não constantes. Isso porque a referência pode e será modificada para zero quando não houver mais nada mantendo uma referência <code class=\"language-text\">strong</code> à ela.</p>\n<p>Alterando o mesmo exemplo anterior para utilizar referência do tipo <code class=\"language-text\">weak</code> o objeto instanciado será desalocado:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Device</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> owner<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Owner</span><span class=\"token operator\">?</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Owner</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">weak</span> <span class=\"token keyword\">var</span> device<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Device</span><span class=\"token operator\">?</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Retorno no console</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">Device</span> named iPhone allocated\n<span class=\"token class-name\">Owner</span> <span class=\"token class-name\">Felipe</span> allocated\n\n<span class=\"token class-name\">Owner</span> <span class=\"token class-name\">Felipe</span> deallocated\n<span class=\"token class-name\">Device</span> named iPhone deallocated</code></pre></div>\n<p>Usos mais frequentes de referências <code class=\"language-text\">weak</code> são:</p>\n<ul>\n<li>Propriedades de <code class=\"language-text\">delegate</code>, que geralmente são referenciadas de maneira fraca para evitar ciclos de retenção;</li>\n<li><code class=\"language-text\">Subviews/Controls</code> de uma <code class=\"language-text\">ViewController</code>, pois essas instâncias já têm referência <code class=\"language-text\">strong</code> para manter a <code class=\"language-text\">view</code> principal.</li>\n</ul>\n<h3>Unowned</h3>\n<p>Referência <code class=\"language-text\">unowned</code> tem o comportamento semelhante ao <code class=\"language-text\">weak</code>. Diferentemente da <code class=\"language-text\">weak</code>, em <code class=\"language-text\">unowned</code> não é necessário ser um <code class=\"language-text\">optional</code>, pois ao ser desalocado a instância não é definida como <code class=\"language-text\">nil</code>. O uso de <code class=\"language-text\">unowned</code> somente é utilizado quando temos certeza que o objeto nunca será nulo. Recomenda-se utilizá-lo quando a referência e o código referenciado forem desalocado ao mesmo tempo da memória.</p>\n<p>Como a referência não pode ser opcional, o código de exemplo fica dessa forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Device</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">unowned</span> <span class=\"token keyword\">var</span> owner<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Owner</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Owner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> model\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> owner\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Device named </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> allocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Device named </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> deallocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Owner</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> device<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Device</span><span class=\"token operator\">?</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Owner </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> allocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Owner </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> deallocated\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Instanciando os objetos:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> felipe<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Owner</span><span class=\"token operator\">?</span>\n\nfelipe <span class=\"token operator\">=</span> <span class=\"token class-name\">Owner</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Felipe\"</span></span><span class=\"token punctuation\">)</span>\nfelipe<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> <span class=\"token class-name\">Device</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"iPhone\"</span></span><span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">:</span> felipe<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Veremos que no console os objetos não serão desalocados, pois o <code class=\"language-text\">ARC</code> não definirá o valor de referência para <code class=\"language-text\">nil</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">Owner</span> <span class=\"token class-name\">Felipe</span> allocated\n<span class=\"token class-name\">Device</span> named iPhone allocated</code></pre></div>\n<p>Quando definido manualmente para <code class=\"language-text\">nil</code> veremos o objeto sendo desalocado:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">felipe <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token class-name\">Owner</span> <span class=\"token class-name\">Felipe</span> allocated\n<span class=\"token class-name\">Device</span> named iPhone allocated\n<span class=\"token class-name\">Owner</span> <span class=\"token class-name\">Felipe</span> deallocated\n<span class=\"token class-name\">Device</span> named iPhone deallocated</code></pre></div>","frontmatter":{"title":"Gerenciamento de Memória","date":"11 março, 2019","description":""}},"previous":{"fields":{"slug":"/lazy-var/"},"frontmatter":{"title":"Lazy Var"}},"next":{"fields":{"slug":"/bibliotecas-com-cocoapods/"},"frontmatter":{"title":"Bibliotecas com CocoaPods"}}},"pageContext":{"id":"5e82731a-9ddd-532e-a3a2-9d9cf7350b2a","previousPostId":"b8e0c88f-a91e-5a61-a53a-80c552afd636","nextPostId":"99d08940-2232-53dc-8f57-be2218732c78"}},"staticQueryHashes":["1344965497","2841359383"]}