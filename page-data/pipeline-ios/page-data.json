{"componentChunkName":"component---src-templates-blog-post-js","path":"/pipeline-ios/","result":{"data":{"site":{"siteMetadata":{"title":"Felipe Mendes"}},"markdownRemark":{"id":"87a71028-28b2-5fe6-a3e5-9e913ef8d39b","excerpt":"Introdução Muito se discute sobre metogologia ágil e como podemos entregar aplicações com mais qualidade. No desenvolvimento de software encontramos diversas…","html":"<h2>Introdução</h2>\n<p>Muito se discute sobre metogologia ágil e como podemos entregar aplicações com mais qualidade. No desenvolvimento de software encontramos diversas maneiras para atingir esse objetivo. Automatizar todo processo de desenvolvimento e teste aumenta muito a qualidade do produto e economiza tempo para as equipes. A implementação de uma <code class=\"language-text\">pipeline</code> é uma forma muito comum para o processo de automatização.</p>\n<p><code class=\"language-text\">Pipeline</code> é uma sequência de etapas que precisam ser executadas para colocar uma aplicação em produção. Essas etapas podem: fazer o <code class=\"language-text\">build</code> do código; executar testes automatizados; implantar ambientes de testes e produção; entre outras.</p>\n<p>O principal objetivo de uma <code class=\"language-text\">pipeline</code> em desenvolvimento é automatizar o processo de entrega de software, colocando-os em produção de forma rápida e contínua. E sem perder a qualidade da entrega.</p>\n<p>O conceito de <code class=\"language-text\">pipeline</code> envolve alguns termos, cada vez mais comuns no desenvolvimento, como <code class=\"language-text\">Continuos Integration (CI)</code> e <code class=\"language-text\">Continuous Delivery (CD)</code>:</p>\n<ul>\n<li><code class=\"language-text\">CI</code>, ou intregração contínua, é o processo de automatização de <code class=\"language-text\">builds</code> e testes automatizados que acontecem quando um desenvolvedor faz alguma alteração no repositório;</li>\n<li><code class=\"language-text\">CD</code>, ou entrega contínua, consiste em entregar novos recursos aos usuários de forma mais rápida e eficiente possível. O objetivo principal da entrega contínua é permitir um fluxo constante de atualizações disponibilizadas em produção. Cada entrega está relacionada a uma <code class=\"language-text\">feature</code> da <code class=\"language-text\">sprint</code> do <code class=\"language-text\">Scrum</code>.</li>\n</ul>\n<p>Todo esse processo é de responsabilidade da <code class=\"language-text\">pipeline</code> e está diretamente ligado aos conceitos de metodologia ágil que visam sempre fazer entregas constantes que geram maior valor percebido pelo cliente. Isso facilita o processo de desenvolvimento que deverá lidar com entregas menores e não com atualizações gigantescas, como era feito antigamente no desenvolvimento de software.</p>\n<h1>Pipeline em iOS</h1>\n<p>Atualmente, há diversas plataformas que proporcionam esse serviço às equipes. O <code class=\"language-text\">Bitrise</code> é uma opção muito comum no desenvolvimento <code class=\"language-text\">mobile</code>, pois tem foco nas principais plataformas, como: <code class=\"language-text\">iOS</code>, <code class=\"language-text\">Android</code>, <code class=\"language-text\">Xamarin</code>, <code class=\"language-text\">React Native</code>, <code class=\"language-text\">Ionic</code>, entre outros.</p>\n<p>A plataforma tem muito engajamento pela comunidade de desenvolvedores, o que possibilita um crescimento exponencial com ajuda de <code class=\"language-text\">add-ons</code> e integrações criados pelos próprios usuários. Além disso, a documentação oficial é muito rica em detalhes e a interface é simples e intuitiva.</p>\n<div><img style=\"width:100%;\" src=\"/306cac91373b25d20a994c6665c28b6e/bitrise.svg\"></div>\n<h1>Configurando um projeto</h1>\n<p>Antes de iniciar a configuração de um projeto iOS é necessário adicionar um novo <code class=\"language-text\">app</code> à conta do <code class=\"language-text\">Bitrise</code> e conectar ao repositório. É possível vincular automaticamente às contas do <code class=\"language-text\">GitHub</code>, <code class=\"language-text\">GitLab</code> e <code class=\"language-text\">BitBucket</code>. Ou manualmente com a <code class=\"language-text\">URL</code> de um respositório <code class=\"language-text\">Git</code>.</p>\n<p>Todos os detalhes e procedimentos de implantação podem ser encontrados <a href=\"https://devcenter.bitrise.io/getting-started/getting-started-with-ios-apps/\">nesse link</a>.</p>\n<h1>Personalizando as configurações</h1>\n<p>Ao iniciar um novo <code class=\"language-text\">app</code> é gerado alguns <code class=\"language-text\">workflows</code> de modelo para o tipo de projeto escolhido. No caso do <code class=\"language-text\">iOS</code>, há <code class=\"language-text\">steps</code> de instalação de <code class=\"language-text\">Pods</code> e configuração de <code class=\"language-text\">certificados/provisioning profiles</code>.</p>\n<h2>Workflows</h2>\n<p>Um <code class=\"language-text\">workflow</code> no <code class=\"language-text\">Bitrise</code> é um conjunto de passos, ou <code class=\"language-text\">steps</code> que são executados sequencialmente ao iniciar um <code class=\"language-text\">build</code>. <code class=\"language-text\">Workflows</code> podem ser criados de duas maneiras:</p>\n<ol>\n<li>Alterando diretamente o arquivo <code class=\"language-text\">bitrise.yml</code> do repositório;</li>\n<li>Usando o editor visual disponível em <code class=\"language-text\">bitrise.io</code>. Ao editar pela <code class=\"language-text\">dashboard</code>, o arquivo <code class=\"language-text\">YAML</code> de configurações refletirá as mudanças aplicadas.</li>\n</ol>\n<p>Os <code class=\"language-text\">workflows</code> possibilitam uma infinidade de execuções e podem ser criados quantos forem necessários. Um <code class=\"language-text\">workflow</code> pode trabalhar individualmente, em conjunto com outros fluxos ou através de gatilhos pré-estabelecidos.</p>\n<h2>YAML</h2>\n<p>O arquivo <code class=\"language-text\">YAML</code> possui todos os procedimentos que o <code class=\"language-text\">workflow</code> irá executar. Para facilitar a identificação do que será executado e modificações futuras, podemos criar o arquivo <code class=\"language-text\">bitrise.yml</code> na raiz do repositório. Para isso é necessário informar na <code class=\"language-text\">dashboard</code> para buscar pelo arquivo salvo. Detalhes dessa configuração <a href=\"https://devcenter.bitrise.io/builds/bitrise-yml-online/\">aqui</a>.</p>\n<h3>Exemplo de configuração para iOS:</h3>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">format_version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'8'</span>\n<span class=\"token key atrule\">default_step_lib_source</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/bitrise<span class=\"token punctuation\">-</span>io/bitrise<span class=\"token punctuation\">-</span>steplib.git\n<span class=\"token key atrule\">project_type</span><span class=\"token punctuation\">:</span> ios\n\n<span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">envs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">BITRISE_PROJECT_PATH</span><span class=\"token punctuation\">:</span> ChuckFacts.xcworkspace\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">BITRISE_SCHEME</span><span class=\"token punctuation\">:</span> ChuckFacts\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">BITRISE_EXPORT_METHOD</span><span class=\"token punctuation\">:</span> development\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">BITRISE_IOS_DEVICE</span><span class=\"token punctuation\">:</span> iPhone 12\n\n<span class=\"token key atrule\">trigger_map</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">push_branch</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token key atrule\">workflow</span><span class=\"token punctuation\">:</span> ci\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">pull_request_source_branch</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token key atrule\">workflow</span><span class=\"token punctuation\">:</span> ci\n\n<span class=\"token key atrule\">workflows</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ci</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Runs iOS pipeline\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> Runs default's pipeline for iOS environment\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">activate-ssh-key</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">run_if</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}'</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">git-clone</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cache-pull</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Install dependencies\n        <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span> pod install\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">xcode-test</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">project_path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"$BITRISE_PROJECT_PATH\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">simulator_platform</span><span class=\"token punctuation\">:</span> iOS Simulator\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">simulator_device</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"$BITRISE_IOS_DEVICE\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"$BITRISE_SCHEME\"</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">deploy-to-bitrise-io</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cache-push</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cache_paths</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./Pods -> ./Podfile.lock\"</span></code></pre></div>\n<p>No código acima, temos o cabeçalho de identificação do <code class=\"language-text\">Bitrise</code>, as variáveis de ambiente, gatilhos de execução e os fluxos de execução.</p>\n<h2>Variáveis de ambiente</h2>\n<p>As variáveis de ambiente possibilitam a modificação rápida direto pela <code class=\"language-text\">dashboard</code>. No exemplo, temos variáveis para o nome da <code class=\"language-text\">workspace</code> do projeto no <code class=\"language-text\">Xcode</code>, nome da <code class=\"language-text\">Scheme</code>, dispositivo para testes e método de exportação do <code class=\"language-text\">build</code>. Quando alterado as variáveis, as modificações são refletidas no arquivo <code class=\"language-text\">YAML</code>,</p>\n<h2>Triggers</h2>\n<p>Os <code class=\"language-text\">triggers</code> permitem executar <code class=\"language-text\">workflows</code> com base em algum evento, por exemplo, para <code class=\"language-text\">push</code> e <code class=\"language-text\">pull requests</code> do repositório. É possível configurar eventos para cada <code class=\"language-text\">branch</code> ou mesmo ter um comportamento para qualquer atividade.</p>\n<h2>Steps</h2>\n<p>Cada <code class=\"language-text\">workflow</code> pode ter um comportamento para cada situação ou necessidade. No nosso exemplo, o <code class=\"language-text\">workflow</code> <code class=\"language-text\">CI</code> possui os seguintes procedimentos:</p>\n<ul>\n<li>Ativar chave SSH;</li>\n<li>Clonar o repositório <code class=\"language-text\">Git</code>;</li>\n<li>Buscar por cache;</li>\n<li>Instalar os <code class=\"language-text\">pods</code>;</li>\n<li>Testar o projeto;</li>\n<li><code class=\"language-text\">Deploy</code> após <code class=\"language-text\">build</code>;</li>\n<li>Salvar cache.</li>\n</ul>\n<h3>Deploy</h3>\n<p>O <code class=\"language-text\">step</code> de <code class=\"language-text\">deploy</code> permite salvar relatório do <code class=\"language-text\">build</code> executado, como resultado de testes e <code class=\"language-text\">linters</code>. Para etapas de geração de <code class=\"language-text\">IPAs</code>, é possível ainda criar uma URL para instalação pública. Dessa forma, a equipe interna pode facilmente testar o aplicativo em desenvolvimento.</p>\n<p>Para permitir a exportação da <code class=\"language-text\">IPA</code> é necessário salvar os <code class=\"language-text\">certificados/provisioning profiles</code> manualmente na <code class=\"language-text\">dashboard</code>. Mais informações <a href=\"https://devcenter.bitrise.io/deploy/ios-deploy/deploying-an-ios-app-to-bitrise-io/\">aqui</a>.</p>\n<h1>Bitrise CLI</h1>\n<p>Outra vantagem em utilizar o arquivo <code class=\"language-text\">bitrise.yml</code> é a possibilidade de executá-lo localmente com ajuda do <a href=\"https://devcenter.bitrise.io/bitrise-cli/index/\">CLI</a>. Todos os passos para instalação pode ser encontrado <a href=\"https://devcenter.bitrise.io/bitrise-cli/installation/\">aqui</a>.</p>\n<p>Podemos executar um fluxo com o comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bitrise run WORKFLOW-ID</code></pre></div>\n<div><img style=\"width:100%;\" src=\"/b3b0d5a2b67db1af7ab04bfbfa65f03c/bitrise-cli.svg\"></div>","frontmatter":{"title":"Pipeline de desenvolvimento no Xcode","date":"31 dezembro, 2020","description":"Muito se discute sobre metogologia ágil e como podemos entregar aplicações com mais qualidade. No desenvolvimento de software encontramos diversas maneiras para atingir esse objetivo."}},"previous":{"fields":{"slug":"/generics/"},"frontmatter":{"title":"Programação genérica"}},"next":{"fields":{"slug":"/mocking-in-swift/"},"frontmatter":{"title":"Mocking in Swift"}}},"pageContext":{"id":"87a71028-28b2-5fe6-a3e5-9e913ef8d39b","previousPostId":"47a1ce81-ce1d-528d-860f-6fe11f99a83f","nextPostId":"22ddd10a-46dc-5aff-a15b-f5d1bdbb321e"}},"staticQueryHashes":["1344965497","2841359383"]}