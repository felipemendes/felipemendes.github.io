{"componentChunkName":"component---src-templates-blog-post-js","path":"/programacao-orientada-protocolo/","result":{"data":{"site":{"siteMetadata":{"title":"Felipe Mendes"}},"markdownRemark":{"id":"f2c1e4b2-bd86-5f48-8a6b-31e30f211b3a","excerpt":"Swift, a linguagem de programação desenvolvida pela Apple, é conhecida por sua versatilidade e capacidade de unir diferentes paradigmas de programação. Vamos…","html":"<p>Swift, a linguagem de programação desenvolvida pela Apple, é conhecida por sua versatilidade e capacidade de unir diferentes paradigmas de programação. Vamos explorar como Swift abraça a Programação Orientada a Protocolo (POP) e como ela se destaca na combinação de aspectos orientados a objetos (POO) e funcionais.</p>\n<h3><strong>O Swift é Orientado a Objetos?</strong></h3>\n<p>Sim, Swift é uma linguagem de programação orientada a objetos (POO). Ela suporta conceitos fundamentais da POO, como encapsulamento, herança e polimorfismo. Isso significa que você pode criar classes, instanciar objetos, e usar herança para compartilhar comportamentos entre diferentes tipos.</p>\n<h3><strong>Programação Orientada a Protocolo em Swift</strong></h3>\n<p>No entanto, Swift não se limita apenas à POO. Ela introduz um conceito poderoso chamado Programação Orientada a Protocolo (POP). Os protocolos em Swift são semelhantes às interfaces em outras linguagens, mas vão além, permitindo que tipos não relacionados compartilhem funcionalidades comuns.</p>\n<p>Ao adotar protocolos, Swift promove a reutilização de código de uma maneira flexível. Em vez de herdar de uma única classe, você pode conformar diversos tipos a um protocolo específico, promovendo a modularidade e evitando as limitações da herança única.</p>\n<p>No ecossistema Swift, a Programação Orientada a Protocolo (POP) também possibilita criar uma extensão poderosa do paradigma orientado a objetos, trazendo flexibilidade e reutilização de código para um novo patamar. Vamos explorar como Swift incorpora protocolos com implementações padrões, proporcionando uma experiência de programação ainda mais rica e expressiva.</p>\n<h3><strong>Exemplo Prático de Protocolo com Implementação Padrão</strong></h3>\n<p>Considere o seguinte exemplo de protocolo que define um serviço de autenticação:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">AuthenticationService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">authenticate</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">AuthenticationService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">authenticate</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Lógica padrão de autenticação aqui</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">BiometricAuthentication</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AuthenticationService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Não há necessidade de implementar o método autenticar,</span>\n    <span class=\"token comment\">// pois a implementação padrão já é fornecida pelo protocolo.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">DefaultAuthentication</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AuthenticationService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">authenticate</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Lógica personalizada de autenticação, substituindo a implementação padrão.</span>\n        <span class=\"token keyword\">return</span> username <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"admin\"</span></span> <span class=\"token operator\">&amp;&amp;</span> password <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"securePassword\"</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Neste exemplo, o protocolo <code class=\"language-text\">AuthenticationService</code> define um método para autenticar, e a extensão fornece uma implementação padrão. A estrutura <code class=\"language-text\">BiometricAuthentication</code> herda a implementação padrão, enquanto a estrutura <code class=\"language-text\">DefaultAuthentication</code> fornece uma implementação personalizada, substituindo a implementação padrão.</p>\n<h3><strong>Benefícios da Implementação Padrão em Protocolos</strong></h3>\n<ul>\n<li>Reutilização de Código: Ao fornecer implementações padrões em protocolos, você reduz a duplicação de código em diferentes tipos que conformam ao protocolo.</li>\n<li>Facilidade de Manutenção: Se a lógica padrão precisa ser atualizada, a mudança reflete automaticamente em todos os tipos que herdam essa implementação.</li>\n<li>Personalização Opcional: Tipos que conformam ao protocolo podem optar por usar a implementação padrão ou fornecer sua própria implementação personalizada, proporcionando flexibilidade.</li>\n</ul>\n<h3><strong>A Fusão de Paradigmas</strong></h3>\n<p>O grande diferencial de Swift é sua capacidade de unir os paradigmas de POO e programação funcional de maneira harmoniosa. Você pode usar tipos e objetos como em uma linguagem POO tradicional, enquanto se beneficia de conceitos funcionais, como funções de primeira classe, imutabilidade e passagem de funções como argumentos.</p>\n<h3><strong>Conclusão</strong></h3>\n<p>Swift é mais do que uma linguagem orientada a objetos; ela é uma linguagem que abraça a diversidade de paradigmas de programação. Ao incorporar a Programação Orientada a Protocolo, Swift oferece a flexibilidade necessária para escrever código modular, reutilizável e expressivo. Ao utilizar tanto os princípios de POO quanto os da programação funcional, Swift proporciona uma experiência de desenvolvimento única e poderosa.</p>","frontmatter":{"title":"Programação Orientada a Protocolo (POP) em Swift","date":"22 maio, 2022","description":""}},"previous":{"fields":{"slug":"/copy-on-write/"},"frontmatter":{"title":"Copy on Write em Swift"}},"next":{"fields":{"slug":"/objectivec-swift/"},"frontmatter":{"title":"Diferenças entre Objective-C e Swift"}}},"pageContext":{"id":"f2c1e4b2-bd86-5f48-8a6b-31e30f211b3a","previousPostId":"e7faab55-f525-54db-9253-1270e87573d2","nextPostId":"72d0f413-d493-5cd8-b18e-5b5e340b4705"}},"staticQueryHashes":["1344965497","2841359383"]}