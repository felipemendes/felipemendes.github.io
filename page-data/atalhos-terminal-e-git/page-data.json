{"componentChunkName":"component---src-templates-blog-post-js","path":"/atalhos-terminal-e-git/","result":{"data":{"site":{"siteMetadata":{"title":"Felipe Mendes"}},"markdownRemark":{"id":"f397b09b-9141-5214-a811-1f837f5853a6","excerpt":"Fato notório que o uso de terminal é indispensável para muitos programadores. Seja para o gerenciamento de versão dos projetos ou tarefas rotineiras passamos…","html":"<p>Fato notório que o uso de <em>terminal</em> é indispensável para muitos programadores. Seja para o gerenciamento de versão dos projetos ou tarefas rotineiras passamos muito tempo com o interpretador de comandos aberto no nosso dia a dia.</p>\n<p>Afim de reduzir o tempo de digitação de comandos nada melhor do que utilizar os famosos <em>Shell Aliases</em>. <em>Alias</em> é um pseudônimo ou simplemente um <em>atalho</em> para comandos ou scripts mais complexos.</p>\n<p>Por exemplo, um comando muito comum é o <code class=\"language-text\">ls -a</code> que serve para listar todo tipo de arquivo do diretório. Você pode facilmente criar um atalho para esse comando: <code class=\"language-text\">la</code>.</p>\n<p>Sistemas operacionais baseados no <em>Unix</em> possuem alguns <em>aliases</em> já criados. Você pode visualizá-los digitantando <code class=\"language-text\">alias</code> sem nenhum parâmetro no terminal.</p>\n<p>Para facilitar a minha rotina de desenvolvimento criei um conjunto de atalhos e funções do <em>Bash</em> para acelerar meu fluxo de trabalho e economizar centenas de teclas diárias.</p>\n<p>Este <em>post</em> tem como propósito em apenas listar armazenar meus <em>alisases</em> e comandos úteis. Para criação de atalhos do <em>Git</em> recomendo a <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases\">documentação oficial</a>.</p>\n<p>Git Alias:</p>\n<ul>\n<li><strong>bump</strong> = commit -m ‘Bump version number’</li>\n<li><strong>minor</strong> = commit -m ‘Make minor changes’</li>\n<li><strong>open</strong> = remote -v | awk ‘/origin.*push/ {print $2}’ | xargs open</li>\n<li><strong>save</strong> = !git add -A &#x26;&#x26; git commit -m ‘SAVEPOINT’</li>\n<li><strong>search</strong> = “!f() { git log -S ”$@”; }; f”</li>\n<li><strong>amend</strong> = commit -a —amend</li>\n<li><strong>ac</strong> = !git add -A &#x26;&#x26; git commit -m</li>\n<li><strong>df</strong> = diff</li>\n<li><strong>as</strong> = add -u</li>\n<li><strong>po</strong> = push origin</li>\n<li><strong>co</strong> = checkout</li>\n<li><strong>cob</strong> = checkout -b</li>\n<li><strong>cm</strong> = commit -m</li>\n<li><strong>st</strong> = status</li>\n<li><strong>stl</strong> = !ls -l &#x26;&#x26; git st</li>\n<li><strong>stb</strong> = status -sb</li>\n<li><strong>tags</strong> = tag -l</li>\n<li><strong>undo</strong> = reset HEAD~1 —mixed</li>\n<li><strong>branches</strong> = branch -a</li>\n<li><strong>remotes</strong> = remote -v</li>\n<li><strong>br</strong> = branch</li>\n<li><strong>bra</strong> = branch -a</li>\n<li><strong>hist</strong> = log —pretty=format:‘%h %ad (%ar) | %s%d | %an’ —graph —date=short —since=4.weeks</li>\n<li><strong>type</strong> = cat-file -t</li>\n<li><strong>dump</strong> = cat-file -p</li>\n<li><strong>alias</strong> = ! git config —get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /</li>\n<li><strong>email</strong> = config user.email</li>\n<li><strong>erase</strong> = checkout — .</li>\n<li><strong>df-all-files</strong> = !git submodule foreach —recursive git diff —name-status</li>\n<li><strong>df-all</strong> = !git diff —submodule=diff</li>\n</ul>\n<p>Para aumentar a produtividade no desenvolvimento utilize frequentementes os seguintes atalhos no <em>Terminal</em> e <em><a href=\"https://www.vim.org/\">VIM</a></em>:</p>\n<p>Terminal:</p>\n<ul>\n<li><strong>ctrl+A</strong> = moves to start of line</li>\n<li><strong>ctrl+E</strong> = moves to end of line</li>\n<li><strong>ctrl+B</strong> = moves back one character</li>\n<li><strong>ctrl+F</strong> = moves forward one character</li>\n<li><strong>ctrl+U</strong> = deletes from cursor to start of line</li>\n<li><strong>ctrl+K</strong> = deletes from cursor to end of line</li>\n<li><strong>ctrl+W</strong> = deletes from cursor to beginning of current word</li>\n<li><strong>cmd+shift+v</strong> = copy the highlighted text and paste into cursor position</li>\n</ul>\n<p>VIM:</p>\n<ul>\n<li><strong>0</strong> = move to the beginning of the line</li>\n<li><strong>$</strong> = move to the end of the line</li>\n<li><strong>G</strong> = move to the end of the file</li>\n<li><strong>gg</strong> = move to the beginning of the file</li>\n<li><strong>W</strong> = move forward one word (delimited by a white space)</li>\n<li><strong>B</strong> = move backward one word (delimited by a white space)</li>\n<li><strong>A</strong> = Insert text at the end of the line</li>\n<li><strong>o</strong> = Begin a new line below the cursor</li>\n<li><strong>O</strong> = Begin a new line above the cursor</li>\n<li><strong>dd</strong> = delete line</li>\n<li><strong>3dd</strong> = delete three lines</li>\n<li><strong>u</strong> = undo the last operation</li>\n<li><strong>Ctrl+r</strong> = redo the last undo</li>\n</ul>","frontmatter":{"title":"Atalhos de Terminal e Git","date":"30 setembro, 2019","description":""}},"previous":{"fields":{"slug":"/tratamento-de-erros/"},"frontmatter":{"title":"Tratamento de erros"}},"next":{"fields":{"slug":"/funcao-com-parametro-in-out/"},"frontmatter":{"title":"Função com parâmetro In-Out"}}},"pageContext":{"id":"f397b09b-9141-5214-a811-1f837f5853a6","previousPostId":"9901ca48-f52b-58a8-9aa8-1ed05ff90cb1","nextPostId":"4ae4eecd-b0c1-5a20-b85e-a2f3f99c21d9"}},"staticQueryHashes":["1344965497","2841359383"]}