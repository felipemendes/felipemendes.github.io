{"componentChunkName":"component---src-templates-blog-post-js","path":"/addTeardownBlock-do-xctest/","result":{"data":{"site":{"siteMetadata":{"title":"Felipe Mendes"}},"markdownRemark":{"id":"3a69e4aa-ac77-5e6f-ad32-4cdb240bcf66","excerpt":"O  é um método muito útil por ser executado ao finalizar um teste do framework . Conforme sua documentação é um bloco de código de desmontagem a ser executado…","html":"<p>O <code class=\"language-text\">addTeardownBlock(_)</code> é um método muito útil por ser executado ao finalizar um teste do framework <code class=\"language-text\">XCTest</code>. Conforme sua <a href=\"https://developer.apple.com/documentation/xctest/xctestcase/2887226-addteardownblock\">documentação</a> é um bloco de código de desmontagem a ser executado após o término do método de teste atual.</p>\n<h3>Quando utilizar addTeardownBlock(_)</h3>\n<p>Visto que esse trecho de código é executado ao encerrar um teste podemos realizar diversas validações neste ponto. Uma abordagem comum é quando o teste atual cria algum recurso e precisa ser destruído ao finalizar a execução.</p>\n<p>Uma outra alternativa é verificar se há possíveis casos de <strong>memory leaks</strong> nos objetos testados. Pelo fato do <code class=\"language-text\">Swift</code> trabalhar orientado à <code class=\"language-text\">callbacks</code>, ou <code class=\"language-text\">completion handlers</code>, é muito comum nos depararmos com referências cíclicas, ou classes que dependam uma da outra. Com isso, os objetos não serão liberados da memória e um <strong>memory leaks</strong> será criado.</p>\n<p>Seguindo esse último exemplo, podemos solucionar o vazamento de memória executando o <code class=\"language-text\">addTeardownBlock(_)</code> para verificar se o <strong>sut</strong> está <code class=\"language-text\">nulo</code>. Da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token operator\">...</span>\naddTeardownBlock <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> sut<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n   <span class=\"token class-name\">XCTAssertNil</span><span class=\"token punctuation\">(</span>sut<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span> </code></pre></div>\n<p>Para que seja possível reaproveitar essa verificação em demais testes, podemos criar uma <code class=\"language-text\">extension</code> de <code class=\"language-text\">XCTest</code> com um método para verificar o vazamento de memória de qualquer instância:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">XCTest</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">XCTestCase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">checkMemoryLeak</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> instance<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AnyObject</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">:</span> <span class=\"token class-name\">StaticString</span> <span class=\"token operator\">=</span> <span class=\"token literal constant\">#file</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UInt</span> <span class=\"token operator\">=</span> <span class=\"token literal constant\">#line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        addTeardownBlock <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> instance<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n            <span class=\"token class-name\">XCTAssertNil</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">:</span> file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">:</span> line<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Os parâmetros <code class=\"language-text\">file</code> e <code class=\"language-text\">line</code> ajudam a exibir a falha direto no método de teste ao invés de apontar o erro no método da nossa extensão. Essa abordagem é útil quando o método <code class=\"language-text\">helper</code> possui algum <code class=\"language-text\">assert</code> de teste.</p>","frontmatter":{"title":"addTeardownBlock do XCTest","date":"10 junho, 2020","description":"O addTeardownBlock(_) é um método muito útil por ser executado ao finalizar um teste do framework XCTest. Conforme sua documentação é um bloco de código..."}},"previous":{"fields":{"slug":"/ciclo-de-vida-aplicativo-ios/"},"frontmatter":{"title":"O ciclo de vida do aplicativo iOS"}},"next":{"fields":{"slug":"/auto-layout-programaticamente/"},"frontmatter":{"title":"Auto Layout programaticamente"}}},"pageContext":{"id":"3a69e4aa-ac77-5e6f-ad32-4cdb240bcf66","previousPostId":"05201a73-a882-55bb-b4e9-b1b9bb650d02","nextPostId":"0e47741e-a39c-55a1-a247-d5bca8551067"}},"staticQueryHashes":["1344965497","2841359383"]}